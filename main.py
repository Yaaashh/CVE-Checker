import subprocess
import sys
import asyncio
import logging

# Define the global time limit (5 minutes)
TIME_LIMIT = 300  # Time limit in seconds

# Set up logging configuration
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Function to install dependencies
def install_dependencies():
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        logging.info("Dependencies installed successfully.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to install dependencies: {e}")
        sys.exit(1)

# Function to uninstall dependencies
def uninstall_dependencies():
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "uninstall", "-r", "uninstallation.txt", "-y"])
        logging.info("Dependencies uninstalled successfully.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to uninstall dependencies: {e}")

# Import statements moved to avoid ImportError if dependencies are not yet installed
async def main(keywords_file: str):
    from excel_keywords import get_keywords, create_urls
    from cve_details import gather_cves_for_keywords

    keywords = get_keywords(keywords_file)
    
    if not keywords:
        logging.error("No keywords found. Exiting the script.")
        return
    
    urls = create_urls(keywords)
    
    try:
        await asyncio.wait_for(gather_cves_for_keywords(keywords, urls), timeout=TIME_LIMIT)
        logging.info("Successfully gathered CVE details.")
    except asyncio.TimeoutError:
        logging.error("Script terminated due to exceeding the 5-minute limit.")
    except Exception as e:
        logging.error(f"An error occurred during execution: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python main.py <path_to_keywords_file>")
        sys.exit(1)

    install_dependencies()
    try:
        keywords_file = sys.argv[1]
        asyncio.run(main(keywords_file))
    finally:
        # Uninstallation step is optional, comment the line below if not needed.
        uninstall_dependencies()
